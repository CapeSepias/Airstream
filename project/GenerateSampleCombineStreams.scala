import sbt._

import java.io.File

case class GenerateSampleCombineStreams(
  sourceDir: File,
  from: Int,
  to: Int
) extends SourceGenerator(
  sourceDir / "scala" / "com" / "raquo" / "airstream" / "combine" / "generated" / s"SampleCombineStreams.scala"
) {

  override def apply(): Unit = {
    line("package com.raquo.airstream.combine.generated")
    line()
    line("import com.raquo.airstream.combine.SampleCombineStreamN")
    line("import com.raquo.airstream.core.EventStream")
    line("import com.raquo.airstream.core.Source.SignalSource")
    line()
    line("// #Warning do not edit this file directly, it is generated by GenerateSampleCombineStreams.scala")
    line()
    line("// These are implementations of SampleCombineStreamN used for EventStream's `withCurrentValueOf` and `sample` methods")
    line()
    for (n <- from to to) {
      line("/** @param combinator Must not throw! */")
      enter(s"class SampleCombineStream${n}[T0, ${tupleType(n - 1)}, Out](") {
        line("samplingStream: EventStream[T0],")
        for (i <- 1 until n) {
          line(s"sampledSignal${i}: SignalSource[T${i}],")
        }
        line(s"combinator: (T0, ${tupleType(n - 1)}) => Out")
      }
      enter(s") extends SampleCombineStreamN[Any, Out](", ")") {
        line("samplingStream = samplingStream,")
        line("sampledSignals = " + tupleType(n - 1, "sampledSignal", ".toObservable", separator = " :: ") + " :: Nil,")
        enter("combinator = seq => combinator(", ")") {
          for (i <- 0 until n) {
            line(s"seq(${i}).asInstanceOf[T${i}],")
          }
        }
      }
      line()
    }
    line()
  }

}
