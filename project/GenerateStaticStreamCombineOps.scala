import sbt._

import java.io.File

case class GenerateStaticStreamCombineOps(
  sourceDir: File,
  from: Int,
  to: Int
) extends SourceGenerator(
  sourceDir / "scala" / "com" / "raquo" / "airstream" / "combine" / "generated" / s"StaticStreamCombineOps.scala"
) {

  override def apply(): Unit = {
    line("package com.raquo.airstream.combine.generated")
    line()
    line("import com.raquo.airstream.core.EventStream")
    line("import com.raquo.airstream.core.Source.EventSource")
    line()
    line("// #Warning do not edit this file directly, it is generated by GenerateStaticStreamCombineOps.scala")
    line()
    line("// These combine and combineWith methods are available on the EventStream companion object")
    line("// For instance methods of the same name, see CombinableStream.scala")
    line()
    enter(s"object StaticStreamCombineOps {", "}") {
      line()
      for (n <- from to to) {
        enter(s"def combine[${tupleType(n)}](") {
          line((1 to n).map(i => s"s${i}: EventSource[T${i}]").mkString(", "))
        }
        enter(s"): EventStream[(${tupleType(n)})] = {", "}") {
          line(s"combineWithFn(${tupleType(n, "s")})(Tuple${n}.apply[${tupleType(n)}])")
        }
        line()
        line("/** @param combinator Must not throw! */")
        enter(s"def combineWithFn[${tupleType(n)}, Out](") {
          line((1 to n).map(i => s"s${i}: EventSource[T${i}]").mkString(", "))
        }
        enter(")(") {
          line(s"combinator: (${tupleType(n)}) => Out")
        }
        enter(s"): EventStream[Out] = {", "}") {
          line(s"new CombineStream${n}(${tupleType(n, "s")}, combinator)")
        }
        line()
        line("// --")
        line()
      }
    }
  }

}
